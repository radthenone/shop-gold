networks:
  jewelery-network:
    name: jewelery-network
    driver: bridge

volumes:
    postgres_data:
    minio_data:
    

x-django: &django
  build:
    dockerfile: docker/backend/Dockerfile
    context: .
    target: dev
  stdin_open: true
  tty: true
  volumes:
    - ./backend/src:/src:z
  depends_on: 
    postgres:
      condition: service_healthy
    redis:
      condition: service_healthy
    minio:
      condition: service_healthy
    mailhog:
      condition: service_started
      
x-celery: &celery
  <<: *django
  depends_on:
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy
  stdin_open: true
  tty: true
  entrypoint: ["/celery/celery-entrypoint.sh"]
  volumes:
    - ./backend/src:/src:z
  networks:
    - jewelery-network
      

services:
    app:
      <<: *django
      container_name: django-gold-shop
      env_file:
        - .envs/.env.dev
        - .env
      ports:
        - "8000:8000"
      healthcheck:
        test: [ "CMD", "curl", "-f", "http://localhost:8000/health" ]
        interval: 30s
        timeout: 20s
        retries: 3
      networks:
        - jewelery-network
      profiles: ["dev", "backend"]

    postgres:
      image: postgres:16
      container_name: postgres-gold-shop
      env_file:
        - .envs/.env.postgres
      ports:
        - "5432:5432"
        - "5433:5432"
      volumes:
        - postgres_data:/var/lib/postgresql/data
      healthcheck:
        test: [ "CMD", "pg_isready", "-U", "postgres" ]
        interval: 30s
        timeout: 20s
        retries: 3
      networks:
        - jewelery-network
      profiles: ["dev", "backend", "local"]

    minio:
      image: minio/minio
      container_name: minio-gold-shop
      environment:
        - MINIO_ROOT_USER=minioadmin
        - MINIO_ROOT_PASSWORD=minioadmin
      env_file:
        - .envs/.env.minio
      ports:
        - "9000:9000"  # MinIO API
        - "9001:9001"  # MinIO Console
      volumes:
        - minio_data:/data
      command: server /storage --console-address ":9001"
      healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
        interval: 30s
        timeout: 20s
        retries: 3
      networks:
        - jewelery-network
      profiles: ["dev", "backend", "local"]

    redis:
      image: redis
      container_name: redis-gold-shop
      ports:
        - "6379:6379"
      #command: redis-server --bind ${REDIS_HOST} --port ${REDIS_PORT}
      environment:
        - ALLOW_EMPTY_PASSWORD=yes
      healthcheck:
        test: ["CMD-SHELL", "redis-cli ping || exit 1"]
        interval: 5s
        timeout: 5s
        retries: 5
      networks:
        - jewelery-network
      profiles: ["dev", "backend", "local"]

    celery-worker:
      <<: *celery
      container_name: celery-worker-gold-shop
      env_file:
        - .envs/.env.dev
      command: bash -c "/celery/worker.sh"
      profiles: ["dev", "backend", "local"]

    celery-beat:
      <<: *celery
      container_name: celery-beat-gold-shop
      env_file:
        - .envs/.env.dev
      command: bash -c "/celery/beat.sh"
      profiles: ["dev", "backend", "local"]

    celery-flower:
      <<: *celery
      container_name: flower-gold-shop
      env_file:
        - .envs/.env.dev
      command: bash -c "/celery/flower.sh"
      depends_on:
        - redis
        - celery-worker
        - celery-beat
      ports:
        - "5555:5555"
      profiles: ["dev", "backend", "local"]
      
    mailhog:
      image: mailhog/mailhog
      container_name: mailhog-gold-shop
      ports:
        - "1025:1025"  # SMTP server
        - "8025:8025"  # Web interface
      profiles: ["dev", "backend", "local"]
      networks:
        - jewelery-network

    angular:
      container_name: angular-gold-shop
      build:
        dockerfile: docker/frontend/Dockerfile
        context: .
      ports:
        - "3000:3000"
      profiles: ["dev", "frontend"]
      volumes:
        - ./frontend:/app
        - ./frontend/node_modules:/app/node_modules
      healthcheck:
        test: [ "CMD", "curl", "--fail", "-G", "http://localhost:3000/ping" ]
        interval: 30s
        timeout: 10s
        retries: 30
      networks:
        - jewelery-network